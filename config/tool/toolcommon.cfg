// 1:<prop defs> 2:<prop var>
tool_props = [
    if (> (listlen $arg1) 25) [
        error "Error, too many properties!"
    ] [
        local _code
        _code = [local]

        looplist prop $arg1 [
            append _code (at $prop 0)
        ]

        append _code ";"

        looplist prop $arg1 [
            append _code (format "%1 = %2 ;" (at $prop 0) (at $prop 1))
        ]

        append _code (format "doargs $%1" $arg2)

        result $_code
    ]
]

// 1:<prop defs> 2:<out var>
tool_collect_props = [
    if (> (listlen $arg1) 25) [
        error "Error, too many properties!"
    ] [
        local _code
        _code = [ local @@arg2; @@arg2 ]
        append _code "= [^n"

        looplist prop $arg1 [
            append _code (concatword (at $prop 0) " = [@@" (at $prop 0) "]^n")
        ]

        append _code "]"

        result $_code
    ]
]

tool_modes = [
    dm
    ctf
    dac
    bb
    race
]

tool_muts = [
    ffa
    coop
    insta
    medi
    kaboom
    duel
    surv
    classic
    ons
    vamp
    resize
    hard
    arena
]

tool_team_names = [
    "Neutral"
    "Alpha"
    "Omega"
]

tool_weapon_names = [
    [@@clawlongname]
    [@@pistollongname]
    [@@swordlongname]
    [@@shotgunlongname]
    [@@smglongname]
    [@@flamerlongname]
    [@@plasmalongname]
    [@@zapperlongname]
    [@@riflelongname]
    [@@grenadelongname]
    [@@minelongname]
    [@@rocketlongname]
]

tool_weapon_pickup_names = [
    @(sublist $tool_weapon_names 2)
]

tool_palette_ids = [
    [
        "No palette"
        "Dark fire"
        "Bright fire"
        "Disco"
        "Shock"
        "Bleed"
        "Buff"
        "Warning"
        "Regen"
        "Flash"
    ] [
        @@tool_team_names
    ] [
        @@tool_weapon_names
    ]
]

tool_palette_enforce_vals = [0 @(listlen $tool_team_names) 13]

UNDO_NONE = 0
UNDO_CUBE = 1
UNDO_ENT = 2

// 1:<dest> 2:<src>
tool_colour_fromint = [
    result [
        local _r _g _b
        inttorgb $@arg2 _r _g _b
        set @arg1 [@(divf $_r 255) @(divf $_g 255) @(divf $_b 255)]
    ]
]

// 1:<values> 2:<blue fix> 3:<zero fix>
tool_colour_toint = [
    local _r _g _b
    _r = (min (toint (round (*f (at $arg1 0) 255))) 255)
    _g = (min (toint (round (*f (at $arg1 1) 255))) 255)
    _b = (min (toint (round (*f (at $arg1 2) 255))) 255)

    if $arg2 [
        if (&& [= $_r 0] [= $_g 0] [> $_b 0]) [
            _r = 1
            _g = 1
        ]
    ]

    if $arg3 [
        if (&& [= $_r 0] [= $_g 0] [= $_b 0]) [
            _r = 1
            _g = 1
            _b = 1
        ]
    ]

    rgbtoint $_r $_g $_b
]

// 1:<integer value> 2:<h/s/v> 3:<mod value>
tool_colour_hsvmod_int = [
    local _vec _hue _sat _val
    _vec = []

    @(tool_colour_fromint [_vec] [arg1])
    _vec = (rgbtohsv $_vec)

    _hue = (at $_vec 0)
    _sat = (at $_vec 1)
    _val = (at $_vec 2)

    cases $arg2 h [
        _hue = (mod (+ $_hue $arg3) 360)
    ] s [
        _sat = (minf (*f $_sat $arg3) 1)
    ] v [
        _val = (minf (*f $_val $arg3) 1)
    ]

    _vec = [@_hue @_sat @_val]
    tool_colour_toint (hsvtorgb $_vec)
]

// 1:<colour integer 1> 2:<colour integer 2> 3:<factor> 4:<comp mask>
tool_colour_lerp_int = [
    local _vec1 _vec2 _vec3

    if (=s $arg4) [
        arg4 = [ 1 1 1 ]
    ]

    @(tool_colour_fromint [_vec1] [arg1])
    @(tool_colour_fromint [_vec2] [arg2])

    _vec1 = (rgbtohsv $_vec1)
    _vec2 = (rgbtohsv $_vec2)

    _vec3 = []
    append _vec3 (lerp360 (at $_vec1 0) (at $_vec2 0) (*f $arg3 (at $arg4 0)))
    append _vec3 (lerp    (at $_vec1 1) (at $_vec2 1) (*f $arg3 (at $arg4 1)))
    append _vec3 (lerp    (at $_vec1 2) (at $_vec2 2) (*f $arg3 (at $arg4 2)))

    tool_colour_toint (hsvtorgb $_vec3)
]

tool_procs = []

// 1:<function>
tool_proc_add = [
    append tool_procs $arg1
]

tool_proc = [
    looplist proc $tool_procs [
        $proc
    ]
]

// 1:<index>
uit_list = [
    result [
        uit_get = [(at $arg1 @@arg1)]
        uit_set = [(listsplice $$arg2 $arg1 @@arg1 1)]
        uit_id = @arg1
    ]
]

tool_image_exts = ["jpg" "png" "tga"]
tool_sound_exts = ["wav" "ogg"]

TOOL_FILE_ANY = 0
TOOL_FILE_IMAGE = 1
TOOL_FILE_SOUND = 2
TOOL_FILE_CONFIG = 3
TOOL_FILE_ASSETPACK = 4

// 1:<type>
tool_file_type_exts = [
    case $arg1 @TOOL_FILE_ANY [
        result []
    ] @TOOL_FILE_IMAGE [
        result [@@tool_image_exts]
    ] @TOOL_FILE_SOUND [
        result [@@tool_sound_exts]
    ] @TOOL_FILE_CONFIG [
        result "cfg"
    ]
]

// 1:<file> 2:<type>
tool_file_is_type = [
    local _exts
    _exts = (tool_file_type_exts $arg2)

    if (!=s $_exts) [
        >= (listfind=s $_exts (fileext $arg1)) 0
    ] [
        result 1
    ]
]

// 1:<file>
tool_file_isimage = [
    tool_file_is_type $arg1 @TOOL_FILE_IMAGE
]

// 1:<file>
tool_file_ishidden = [
    = (strstr $arg1 ".") 0
]
