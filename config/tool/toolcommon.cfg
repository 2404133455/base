// 1:<prop defs> 2:<prop var>
tool_props = [
    if (> (listlen $arg1) 25) [
        echo "Error, too many properties!"
    ] [
        code = [local]

        looplist prop $arg1 [
            append code (at $prop 0)
        ]

        append code ";"

        looplist prop $arg1 [
            append code (format "%1 = %2 ;" (at $prop 0) (at $prop 1))
        ]

        append code (format "doargs $%1" $arg2)

        result $code
    ]
]

// 1:<prop defs> 2:<out var>
tool_collect_props = [
    if (> (listlen $arg1) 25) [
        error "Error, too many properties!"
    ] [
        code = [ local @@arg2; @@arg2 ]
        append code "= [^n"

        looplist prop $arg1 [
            append code (concatword (at $prop 0) " = @" (at $prop 0) "^n")
        ]

        append code "]"
    ]

    result $code
]

tool_modes = [
    dm
    ctf
    dac
    bb
    race
]

tool_muts = [
    ffa
    coop
    insta
    medi
    kaboom
    duel
    surv
    classic
    ons
    vamp
    resize
    hard
    arena
]

tool_team_names = [
    "Neutral"
    "Alpha"
    "Omega"
]

tool_weapon_names = [
    [@@clawlongname]
    [@@pistollongname]
    [@@swordlongname]
    [@@shotgunlongname]
    [@@smglongname]
    [@@flamerlongname]
    [@@plasmalongname]
    [@@zapperlongname]
    [@@riflelongname]
    [@@grenadelongname]
    [@@minelongname]
    [@@rocketlongname]
]

tool_weapon_pickup_names = [
    @(sublist $tool_weapon_names 2)
]

tool_palette_ids = [
    [
        "No palette"
        "Dark fire"
        "Bright fire"
        "Disco"
        "Shock"
        "Bleed"
        "Buff"
        "Warning"
        "Regen"
        "Flash"
    ] [
        @@tool_team_names
    ] [
        @@tool_weapon_names
    ]
]

tool_palette_enforce_vals = [0 @(listlen $tool_team_names) 13]

UNDO_NONE = 0
UNDO_CUBE = 1
UNDO_ENT = 2

// 1:<dest> 2:<src>
tool_colour_fromint = [
    result [
        local r g b
        inttorgb $@arg2 r g b
        set @arg1 [@(divf $r 255) @(divf $g 255) @(divf $b 255)]
    ]
]

// 1:<values> 2:<blue fix> 3:<zero fix>
tool_colour_toint = [
    local r g b
    r = (min (toint (round (*f (at $arg1 0) 255))) 255)
    g = (min (toint (round (*f (at $arg1 1) 255))) 255)
    b = (min (toint (round (*f (at $arg1 2) 255))) 255)

    if $arg2 [
        if (&& [= $r 0] [= $g 0] [> $b 0]) [
            r = 1
            g = 1
        ]
    ]

    if $arg3 [
        if (&& [= $r 0] [= $g 0] [= $b 0]) [
            r = 1
            g = 1
            b = 1
        ]
    ]

    rgbtoint $r $g $b
]

// 1:<integer value> 2:<h/s/v> 3:<mod value>
tool_colour_hsvmod_int = [
    local vec hue sat val
    vec = []

    @(tool_colour_fromint [vec] [arg1])
    vec = (rgbtohsv $vec)

    hue = (at $vec 0)
    sat = (at $vec 1)
    val = (at $vec 2)

    cases $arg2 h [
        hue = (mod (+ $hue $arg3) 360)
    ] s [
        sat = (minf (*f $sat $arg3) 1)
    ] v [
        val = (minf (*f $val $arg3) 1)
    ]

    vec = [@hue @sat @val]
    tool_colour_toint (hsvtorgb $vec)
]

// 1:<colour integer 1> 2:<colour integer 2> 3:<factor> 4:<comp mask>
tool_colour_lerp_int = [
    local vec1 vec2 vec3

    if (=s $arg4) [
        arg4 = [ 1 1 1 ]
    ]

    @(tool_colour_fromint [vec1] [arg1])
    @(tool_colour_fromint [vec2] [arg2])

    vec1 = (rgbtohsv $vec1)
    vec2 = (rgbtohsv $vec2)

    vec3 = []
    append vec3 (lerp360 (at $vec1 0) (at $vec2 0) (*f $arg3 (at $arg4 0)))
    append vec3 (lerp    (at $vec1 1) (at $vec2 1) (*f $arg3 (at $arg4 1)))
    append vec3 (lerp    (at $vec1 2) (at $vec2 2) (*f $arg3 (at $arg4 2)))

    tool_colour_toint (hsvtorgb $vec3)
]

tool_procs = []

// 1:<function>
tool_proc_add = [
    append tool_procs $arg1
]

tool_proc = [
    looplist proc $tool_procs [
        $proc
    ]
]

// 1:<index>
uit_list = [
    result [
        uit_get = [(at $arg1 @@arg1)]
        uit_set = [(listsplice $$arg2 $arg1 @@arg1 1)]
        uit_id = @arg1
    ]
]
