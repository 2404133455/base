// Shaders that must be loaded before the engine can render any basic UI.

shader 0 "null" [
    attribute vec4 vvertex;
    void main(void)
    {
        gl_Position = vvertex;
    }
] [
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        fragcolor = vec4(1.0, 0.0, 1.0, 1.0);
    }
]

shader 0 "hud" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        vec4 color = texture2D(tex0, texcoord0);
        fragcolor = colorscale * color;
    }
]

shader 0 "hudworld" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    uniform float ldrscale;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vec4(vcolor.rgb * ldrscale, vcolor.a);
    }
] [
    uniform sampler2D tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        vec4 color = texture2D(tex0, texcoord0);
        fragcolor = colorscale * color;
    }
]

shader 0 "hudoutline" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    uniform vec4 textparams;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        vec4 color = texture2D(tex0, texcoord0);
        float dist = color.r * color.a;
        float border = smoothstep(textparams.x, textparams.y, dist);
        float outline = smoothstep(textparams.z, textparams.w, dist);
        fragcolor = vec4(colorscale.rgb * outline, colorscale.a * border);
    }
]

shader 0 "hudtext" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    uniform vec4 textparams;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        float dist = texture2D(tex0, texcoord0).r;
        float border = smoothstep(textparams.x, textparams.y, dist);
        float outline = smoothstep(textparams.z, textparams.w, dist);
        fragcolor = vec4(colorscale.rgb * outline, colorscale.a * outline);
    }
]

shader 0 "hudtextworld" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    uniform float ldrscale;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vec4(vcolor.rgb * ldrscale, vcolor.a);
    }
] [
    uniform sampler2D tex0;
    uniform vec4 textparams;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        float dist = texture2D(tex0, texcoord0).r;
        float border = smoothstep(textparams.x, textparams.y, dist);
        float outline = smoothstep(textparams.z, textparams.w, dist);
        fragcolor = vec4(colorscale.rgb * outline, colorscale.a * border);
    }
]

shader 0 "hudnotexture" [
    attribute vec4 vvertex, vcolor;
    uniform mat4 hudmatrix;
    varying vec4 color;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        color = vcolor;
    }
] [
    varying vec4 color;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        fragcolor = color;
    }
]

// uses [(-1, -1), (1, 1)] coordinates
shader 0 "hudbackground" [
    uniform mat4 hudmatrix;
    attribute vec4 vvertex;
    attribute vec2 vtexcoord0;
    varying vec2 texcoord0;
    varying vec2 pos;
    void main() {
        gl_Position = hudmatrix * vvertex;
        pos = vvertex.xy;
        texcoord0 = vtexcoord0;
    }
] [
    uniform float time;
    uniform float aspect;

    uniform sampler2D tex0; // background image
    uniform sampler2D tex1; // water
    uniform sampler2D tex2; // caustics
    uniform sampler2D tex3; // mask

    varying vec2 pos;
    varying vec2 texcoord0;

    fragdata(0) vec4 fragcolor;

    void main() {
        vec4 mask = texture2D(tex3, texcoord0);

        mask.rgb *= mask.a;

        float nebulamask = mask.r * 0.4;

        float xspeed1 = sin((pos.x*10)+time*0.5)*0.05;
        float yspeed1 = cos((pos.y*10)+time*0.5)*0.05;

        float xspeed2 = sin((pos.x*10)+time*0.6)*0.05;
        float yspeed2 = cos((pos.y*10)+time*0.6)*0.05;

        vec2 guv0 = vec2((pos.x*0.75+nebulamask)-xspeed1, (pos.y*0.75+nebulamask)-yspeed1);
        vec2 guv1 = vec2((pos.x*0.5+nebulamask)-yspeed1, (pos.y*0.5+nebulamask)-xspeed1);
        vec2 guv2 = vec2((pos.x*0.5+nebulamask)-xspeed2, (pos.y*0.5+nebulamask)-yspeed2);
        vec2 guv3 = vec2(pos.x-time*0.8, pos.y+time);
        vec2 guv4 = vec2(pos.x-time*0.05, pos.y+time*0.05);

        vec4 bg = texture2D(tex0, texcoord0);
        vec4 nebula1 = texture2D(tex1, guv0);
        vec4 nebula2 = texture2D(tex1, guv1);
        vec4 nebula3 = texture2D(tex2, guv2);
        vec4 glimmer = texture2D(tex1, guv3);
        vec4 ring    = texture2D(tex2, guv4);

        // Base image
        vec4 col = bg;

        // Nebulae
        col.r *= mix(vec4(1, 1, 1, 1), (nebula1 + nebula2) * nebula3, 0.6 - (mask.r * 0.4)).r;

        // Star glimmer
        float threshold = min(bg.g * (1 / 0.7), 1.0);
        col *= mix(1.0, max((glimmer * glimmer * 3).r, 0.5), threshold * (1.0 - step(0.001, mask.r)));

        // Eclipse ring highlight
        col *= mix(1.0 , ring.r * 2.5, pow(mask.r, 5));

        fragcolor = col;
    }
]

