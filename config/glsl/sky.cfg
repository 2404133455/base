////////////////////////////////////////////////
//
// sky shaders
//
////////////////////////////////////////////////

skyboxshader = [
    shader 0 $arg1 [
        attribute vec4 vvertex, vcolor;
        attribute vec2 vtexcoord0;
        uniform mat4 skymatrix;
        uniform float ldrscale;
        varying vec4 colorscale;
        @(? (>= (strstr $arg1 "smp") 0) [
            uniform float millis;
            varying vec2 texcoord0, texcoord1, texcoord2, texcoord3;
        ] [
            varying vec2 texcoord0;
        ])
        void main(void)
        {
            gl_Position = skymatrix * vvertex;
            @(? (>= (strstr $arg1 "smp") 0) [
                texcoord0 = vtexcoord0 * 0.3 + millis*vec2( 0.02,  0.05)*0.1250;
                texcoord1 = vtexcoord0 * 0.2 + millis*vec2(-0.05, -0.02)*0.1450;
                texcoord2 = vtexcoord0 * 0.8 + millis*vec2(-0.05,  0.05)*0.0805;
                texcoord3 = vtexcoord0 * 0.4 + millis*vec2( 0.02, -0.05)*0.0825;
            ] [
                texcoord0 = vtexcoord0;
            ])
            colorscale = vec4(ldrscale * vcolor.rgb, vcolor.a);
        }
    ] [
        uniform sampler2D tex0;
        varying vec4 colorscale;
        @(? (>= (strstr $arg1 "smp") 0) [
            varying vec2 texcoord0, texcoord1, texcoord2, texcoord3;
        ] [
            varying vec2 texcoord0;
        ])
        fragdata(0) vec4 fragcolor;
        void main(void)
        {
            @(? (>= (strstr $arg1 "smp") 0) [
                vec4 smp1 = texture2D(tex0, texcoord0);
                vec4 smp2 = texture2D(tex0, texcoord1);
                vec4 smp3 = texture2D(tex0, texcoord2);
                vec4 smp4 = texture2D(tex0, texcoord3);

                vec4 diffuse = ((smp1 * smp2) + (smp3 * smp4)) * 0.5;
            ] [
                vec4 diffuse = texture2D(tex0, texcoord0);
            ])

            fragcolor = colorscale * diffuse;
        }
    ]
]

skyboxshader "skybox"
skyboxshader "skyboxsmp"

shader 0 "cloudshadow" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 skymatrix;
    uniform float ldrscale;
    varying vec4 colorscale;
    varying vec2 texcoord0;
    void main(void)
    {
        gl_Position = skymatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vec4(ldrscale * vcolor.rgb, vcolor.a);
    }
] [
    uniform sampler2D tex0;
    varying vec4 colorscale;
    varying vec2 texcoord0;
    uniform float shadowstrength;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        vec4 texcolor = texture2D(tex0, texcoord0);
        float alpha = colorscale.a * texcolor.a * shadowstrength;

        fragcolor.rgb = mix(vec3(1.0), texcolor.rgb*colorscale.rgb, alpha) * (1.0 - alpha);
        fragcolor.a = alpha;
    }
]

shader 0 "skyboxoverbright" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 skymatrix;
    uniform float ldrscale;
    varying vec4 colorscale;
    varying vec2 texcoord0;
    void main(void)
    {
        gl_Position = skymatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vec4(ldrscale * vcolor.rgb, vcolor.a);
    }
] [
    uniform sampler2D tex0;
    uniform vec3 overbrightparams;
    uniform float ldrscale;
    varying vec4 colorscale;
    varying vec2 texcoord0;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        vec4 color = texture2D(tex0, texcoord0);
        float lum = dot(vec3(@lumweights), color.rgb);
        float overbright = mix(overbrightparams.x, overbrightparams.y, clamp(lum - overbrightparams.z, 0.0, 1.0));
        color.rgb *= overbright;
        fragcolor = colorscale * color;
    }
]

shader 0 "atmosphere" [
    attribute vec4 vvertex;
    uniform mat4 sunmatrix;
    varying vec3 camvec;
    void main(void)
    {
        gl_Position = vvertex;

        vec4 p = sunmatrix * vvertex;
        camvec = p.xyz / p.w;
    }
] [
    uniform vec4 sunlight;
    uniform vec3 sundir;
    uniform vec3 sunweight;
    uniform vec3 sundiskcolor;
    uniform vec2 sundiskparams;
    uniform vec4 opticaldepthparams;
    uniform vec3 mieparams;
    uniform vec3 betarayleigh, betamie, betaozone;
    uniform float atmodither;
    uniform vec2 hdrgamma;
    varying vec3 camvec;
    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec3 camdir = normalize(camvec);
        float costheta = dot(camdir, sundir);

        // sun disk
        float edgeoffset = max(1.0 - (1.0 - max(costheta, 0.0)*costheta)*sundiskparams.x, 0.0);
        // limb darken with distance to edge
        vec3 limbdarken = pow(vec3(edgeoffset), vec3(0.397, 0.503, 0.64));
        // lighten edges for corona, but limit it to not interfere with limb darkening
        float corona = min(edgeoffset * sundiskparams.y, 1.0);
        corona = max(0.1725 / (1.15 - corona * corona) - 0.15, 0.0);
        // apply limb darkening and corona to clamped sunlight color
        vec3 sundisk = sundiskcolor * limbdarken * corona;

        // optical depth along view ray
        float offset = camdir.z*opticaldepthparams.w;
        vec3 depth = sqrt(offset*offset + opticaldepthparams.xyz) - offset;
        vec3 rayleighweight = betarayleigh * depth.x;
        vec3 mieweight = betamie * depth.y;
        vec3 ozoneweight = betaozone * (depth.z - depth.x);

        // extinction of light along view ray
        vec3 viewweight = sunweight - (rayleighweight + mieweight + ozoneweight);
        vec3 extinction = (exp2(viewweight) - 1.0) / viewweight;

        // calculate in-scattering
        float rphase = (1.5 + 0.5*costheta*costheta) * (3.0 / (16.0 * 3.14159265));
        float mphase = inversesqrt(mieparams.x + mieparams.y*min(costheta, mieparams.z));
        vec3 scatter = rayleighweight * rphase + mieweight * (mphase * mphase * mphase);

        // combine scattering and extinction with sundisk
        vec3 inscatter = (sunlight.rgb * scatter + sundisk) * extinction;

        @(hdrgammaencode inscatter)

        vec4 color = vec4(inscatter, sunlight.a);
        float dither = dot(
            fract((gl_FragCoord.xy - 0.5).xyxy*vec4(0.5, 0.5, 0.25, 0.25)),
            vec4(0.375, 0.9375, 0.25, 0.125)) * atmodither;
        dither -= atmodither * 0.5;

        color.rgb += vec3(dither, dither, dither);

        fragcolor = color;
    }
]

shader 0 "skyfog" [
    attribute vec4 vvertex, vcolor;
    uniform mat4 skymatrix;
    uniform float ldrscale;
    varying vec4 color;
    void main(void)
    {
        gl_Position = skymatrix * vvertex;
        color = vec4(ldrscale * vcolor.rgb, vcolor.a);
    }
] [
    uniform sampler2D tex0;
    varying vec4 color;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        fragcolor =
            //:variantoverride vec4(color.rgb, color.a * color.a)
            color
            ;
    }
]

