///////////////////////////////////////////////////
//
// used for rendering to the HUD
//
///////////////////////////////////////////////////

shader 0 "hudrgb" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        if(colorscale.a <= 0.0) discard;
        vec4 color = texture2D(tex0, texcoord0);
        fragcolor.rgb = colorscale.rgb * color.rgb;
        fragcolor.a   = colorscale.a;
    }
]

shader 0 "hudrect" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2DRect tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 color = colorscale * texture2DRect(tex0, texcoord0);
        if(color.a <= 0.0) discard;
        fragcolor = color;
    }
]

hudvisor = [
    shader 0 $arg1 [
        attribute vec4 vvertex, vcolor;
        attribute vec2 vtexcoord0;
        uniform mat4 hudmatrix;
        varying vec2 texcoord0;
        varying vec4 colorscale;

        void main(void)
        {
            gl_Position = hudmatrix * vvertex;
            texcoord0 = vtexcoord0;
            colorscale = vcolor;
        }
    ] [
        uniform sampler2DRect tex0;
        uniform float time;
        @(? (>= (strstr $arg1 "view") 0) [
            uniform vec4 visorparams;
        ])
        uniform vec4 visorsize;
        varying vec2 texcoord0;
        varying vec4 colorscale;

        fragdata(0) vec4 fragcolor;

        float rand(vec2 co) { return fract(sin(dot(co.xy, vec2(12.9898, 78.233)))*43758.5453); }

        void main(void)
        {
            vec2 uv = texcoord0.xy;
            vec4 diffuse = vec4(0.0);

            @(if (>= (strstr $arg1 "view") 0) [result [
                // WARNING: This program MUST produce the same
                // results as the engine 'visorcoords()' for cursor projection

                uv *= visorsize.zw;

                uv -= vec2(0.5);
                uv *= visorparams.zw;

                float l = length(uv);
                uv.xy *= (1.0 + visorparams.x * visorparams.y * visorparams.y);
                uv.xy /= (1.0 + visorparams.x + l * l);

                uv += vec2(0.5);

                uv *= visorsize.xy;
            ]])

            diffuse = texture2DRect(tex0, uv);

            if(diffuse.a == 0.0) discard;

            fragcolor = colorscale * diffuse;
        }
    ]
]

hudvisor "hudvisor"
hudvisor "hudvisorview"

shader 0 "hud2d" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 color = colorscale * texture2D(tex0, texcoord0);
        if(color.a <= 0.0) discard;
        fragcolor = color;
    }
]

shader 0 "hud3d" [
    attribute vec4 vvertex, vcolor;
    attribute vec3 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler3D tex0;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 color = colorscale * texture3D(tex0, texcoord0);
        if(color.a <= 0.0) discard;
        fragcolor = color;
    }
]

shader 0 "hudcubemap" [
    attribute vec4 vvertex, vcolor;
    attribute vec3 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform samplerCube tex0;
    varying vec3 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main(void)
    {
        vec4 color = colorscale * textureCube(tex0, texcoord0);
        if(color.a <= 0.0) discard;
        fragcolor = color;
    }
]

hudhalo = [
    shader 0 $arg1 [
        attribute vec4 vvertex, vcolor;
        attribute vec2 vtexcoord0;
        uniform mat4 hudmatrix;
        uniform float millis;
        varying vec2 texcoord0;
        varying vec4 colorscale;

        @(if (|| (>f $halonoisesample 0.0) (>f $halonoisemixcol 0.0) (>f $halonoisemixblend 0.0)) [result [
            varying float noise;
        ]])

        float rand(vec2 co) { return fract(sin(dot(co.xy, vec2(12.9898, 78.233)))*43758.5453); }

        void main(void)
        {
            gl_Position = hudmatrix * vvertex;
            texcoord0 = vtexcoord0;
            colorscale = vcolor;
            @(if (|| (>f $halonoisesample 0.0) (>f $halonoisemixcol 0.0) (>f $halonoisemixblend 0.0)) [result [
                noise = (rand(vec2(millis)) - 0.5) * 2.0;
            ]])
        }
    ] [
        uniform sampler2DRect tex0;
        uniform vec2 haloparams;
        uniform float millis;
        varying vec2 texcoord0;
        varying vec4 colorscale;

        @(if (|| (>f $halonoisesample 0.0) (>f $halonoisemixcol 0.0) (>f $halonoisemixblend 0.0)) [result [
            varying float noise;
        ]])

        @(gfetchdefs [tex1])

        fragdata(0) vec4 fragcolor;

        float rand(vec2 co) { return fract(sin(dot(co.xy, vec2(12.9898, 78.233)))*43758.5453); }

        vec4 getsample(sampler2DRect tex, vec2 coord, vec2 offset)
        {
            vec2 uv = coord + vec2(offset * @[halooffset]);
            @(if (>f $halonoisesample 0.0) [result [
                uv += vec2(offset * (rand(coord + (offset * noise)) - 0.5) * @[halonoisesample]);
            ]])
            return texture2DRect(tex, uv);
        }

        void main(void)
        {
            @(loopconcat+ n 0 $halosamples [
                local x y
                x = (at [0.0  1.0 -1.0  1.0 -1.0] $n)
                y = (at [0.0 -1.0 -1.0  1.0  1.0] $n)
                if $n [result [
                    vec4 samples@n = getsample(tex0, texcoord0, vec2(@x, @y));
                    if(samples@n.a > outcol.a) outcol = samples@n; // top
                    oaccum += samples@n;
                    oaccum *= 0.5;
                ]] [result [
                    vec4 samples@n = getsample(tex0, texcoord0, vec2(@x, @y));
                    vec4 outcol = samples@n;
                    vec4 oaccum = samples@n;
                ]]
            ])

            // convert alpha back to distance
            float alpha = outcol.a, dist = (1.0 - alpha) * haloparams.x;

            // extract the depth information from the scene
            @(gdepthunpack depth [gfetch(tex1, gl_FragCoord.xy)])
            float maxdist = -depth;
            if(maxdist <= 0) maxdist = -gdepthunpackparams.x;

            // depth test and discard if it fails
            @(if (>= (strstr $arg1 "depth") 0) [result [
                if(dist > maxdist) discard;
            ]])

            if(alpha == oaccum.a)
            {   // no change in source pixel distance, must be infill
                @(if (>= (strstr $arg1 "depth") 0) [result [
                    discard;
                ]] [result [
                    if(dist > maxdist)
                    { // behind something, draw infill
                        @(if (>f $haloinfillmix 0.0) [result [
                            outcol = mix(outcol, oaccum, @[haloinfillmix]);
                        ]])
                        outcol *= vec4(vec3(@[haloinfillcol]), @[haloinfillblend]);
                    }
                    else discard;
                ]])
            }
            else
            { // outline
                @(if (>f $halooutlinemix 0.0) [result [
                    outcol = mix(outcol, oaccum, @[halooutlinemix]);
                ]])

                @(if (>f $halooutlineshadow 0.0) [result [
                    outcol = mix(outcol, getsample(tex0, texcoord0, vec2(0.0, -1.0)), @[halooutlineshadow]);
                ]])

                outcol *= vec4(vec3(@[halooutlinecol]), @[halooutlineblend]);
            }

            @(if (>f $halonoisemixcol 0.0) [result [
                outcol.rgb = mix(outcol.rgb, alpha * rand(texcoord0 + noise), @[halonoisemixcol]);
            ]])

            @(if (>f $halonoisemixblend 0.0) [result [
                outcol.a = mix(outcol.a, alpha * rand(texcoord0 - noise), @[halonoisemixblend]);
            ]])

            fragcolor = outcol * colorscale;
        }
    ]
]

hudhalo "hudhalodepth"
hudhalo "hudhalotop"
