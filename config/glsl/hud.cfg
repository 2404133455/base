///////////////////////////////////////////////////
//
// used for rendering to the HUD
//
///////////////////////////////////////////////////

shader 0 "hudrgb" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        vec4 color = texture2D(tex0, texcoord0);
        fragcolor.rgb = colorscale.rgb * color.rgb;
        fragcolor.a   = colorscale.a;
    }
]

shader 0 "hudrect" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2DRect tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        fragcolor = colorscale * texture2DRect(tex0, texcoord0);
    }
]

hudvisor = [
    shader 0 $arg1 [
        attribute vec4 vvertex, vcolor;
        attribute vec2 vtexcoord0;
        uniform mat4 hudmatrix;
        varying vec2 texcoord0;
        varying vec4 colorscale;
        void main(void)
        {
            gl_Position = hudmatrix * vvertex;
            texcoord0 = vtexcoord0;
            colorscale = vcolor;
        }
    ] [
        uniform sampler2DRect tex0;
        @(? (>= (strstr $arg1 "view") 0) [
            uniform vec4 visorparams;
        ])
        uniform vec4 visorsize;
        varying vec2 texcoord0;
        varying vec4 colorscale;
        fragdata(0) vec4 fragcolor;
        void main(void)
        {
            @(if (>= (strstr $arg1 "view") 0) [result [
                vec2 uv = texcoord0.xy * visorsize.zw;
                vec4 diffuse = vec4(0.0);

                uv -= vec2(0.5);
                uv *= visorparams.zw;

                float l = length(uv);
                uv.y *= (1.0 + visorparams.x * visorparams.y * visorparams.y);
                uv.y /= (1.0 + visorparams.x + l * l);

                uv += vec2(0.5);

                bool passed = uv.x >= 0.0 && uv.x <= 1.0 && uv.y >= 0.0 && uv.y <= 1.0;

                uv *= visorsize.xy;

                if(passed) diffuse = texture2DRect(tex0, uv);
            ]] [result [
                vec4 diffuse = texture2DRect(tex0, texcoord0);
            ]])

            fragcolor = colorscale * diffuse;
        }
    ]
]

hudvisor "hudvisor"
hudvisor "hudvisorview"

shader 0 "hud2d" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        fragcolor = colorscale * texture2D(tex0, texcoord0);
    }
]

shader 0 "hud3d" [
    attribute vec4 vvertex, vcolor;
    attribute vec3 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec3 texcoord0;
    varying vec4 color;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        color = vcolor;
    }
] [
    uniform sampler3D tex0;
    varying vec3 texcoord0;
    varying vec4 color;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        fragcolor = color * texture3D(tex0, texcoord0);
    }
]

shader 0 "hudcubemap" [
    attribute vec4 vvertex, vcolor;
    attribute vec3 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec3 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform samplerCube tex0;
    varying vec3 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        fragcolor = colorscale * textureCube(tex0, texcoord0);
    }
]

shader 0 "huddamage" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    varying vec2 pos;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        pos = vvertex.xy;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform float time;
    uniform vec3 speed;
    uniform vec3 colour;
    uniform sampler2D tex0; // mask
    uniform sampler2D tex1; // mixer

    varying vec2 texcoord0;
    varying vec4 colorscale;
    varying vec2 pos;
    fragdata(0) vec4 fragcolor;

    float rand(vec2 co) { return fract(sin(dot(co.xy, vec2(12.9898, 78.233)))*43758.5453); }

    void main(void)
    {
        vec4 mask = texture2D(tex0, texcoord0);
        if(mask.a == 0.0) discard;
        vec4 mixer = texture2D(tex1, vec2(pos.x, pos.y+time*speed.x));
        mixer += texture2D(tex1, vec2(pos.x+0.33, pos.y+time*speed.y));
        if(speed.z != 0.0)
        {
            float distort = rand(vec2(pos.y, pos.y+(rand(vec2(time))-0.5)/16.0))*speed.z;
            fragcolor.rgb = mix(distort, mixer.r, mixer.a)*colour.rgb*colorscale.rgb;
            fragcolor.a = mask.a*colorscale.a;
        }
        else
        {
            mixer.a *= 0.5;
            if(mixer.a == 0.0) discard;
            fragcolor.rgb = mixer.r*colour.rgb*colorscale.rgb;
            fragcolor.a = mixer.a*mask.a*colorscale.a;
        }
    }
]

shader 0 "hudhalo" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0 - @(*f $halooffset 0.5);
        colorscale = vec4(vcolor.rgb * vcolor.a, vcolor.a);
    }
] [
    uniform sampler2DRect tex0;
    uniform float halofade;
    varying vec2 texcoord0;
    varying vec4 colorscale;
    fragdata(0) vec4 fragcolor;
    void main(void)
    {
        vec4 halo = 0.25 * (
            texture2DRectOffset(tex0, texcoord0, ivec2(0, 0)) +
            texture2DRectOffset(tex0, texcoord0, ivec2(@halooffset, 0)) +
            texture2DRectOffset(tex0, texcoord0, ivec2(0, @halooffset)) +
            texture2DRectOffset(tex0, texcoord0, ivec2(@halooffset, @halooffset)));
        halo *= clamp((1.0 - halo.a) * halofade, 0.0, 1.0);
        fragcolor = colorscale * vec4(halo.rgb, max(max(halo.r, halo.g), halo.b));
    }
]
