newui "blank" $SURFACE_COMPOSITE [
    uicolour 0xFFFFFFFF 1.0 1.0
]

shader $SHADER_DEFAULT "loading" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    uniform float millis;
    uniform vec4 params; // rotation length iters speed
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    const float PI = 3.1415926535;
    const float sections = 3.0;

    bool belongs(float time, vec2 uv, float near, float far)
    {
        near += sin(uv.x - time * 8.0) / 50.0;
        far += cos(uv.y - time * 8.0) / 50.0;
        vec2 center = vec2(0.5, 0.5);
        vec2 xy = uv - center;
        float dist = distance(xy, vec2(0.0, 0.0));
        float angle = mod(atan(xy.y, xy.x) + time * 2.5 + sin(time * 4.0) / 1.0, PI * 2.0);
        float oddity = mod(angle / (2.0 * PI) * sections * 2.0, 2.0);
        if(dist > near && dist < far && floor(mod(oddity, 2.0)) == 0.0) return true;
        return false;
    }

    void main()
    {
        if(belongs(millis, texcoord0, 0.2, 0.25) || belongs(millis + 0.5, texcoord0, 0.3, 0.35) || belongs(millis + 1.0, texcoord0, 0.4, 0.45))
            fragcolor.rg = vec2(1.0) * colorscale.ra;
        else discard;
    }
]

newui "loading" $SURFACE_COMPOSITE [ uirender "loading" 1 1 ]

shader $SHADER_DEFAULT "rgbamixer" [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    uniform float millis;
    uniform vec4 matsplit;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    const vec3 material1 = vec3(1.0, 0.0, 0.0);
    const vec3 material2 = vec3(0.0, 1.0, 0.0);
    const vec3 material3 = vec3(0.0, 0.0, 1.0);

    void main()
    {
        vec4 pattern = texture2D(tex0, texcoord0), diffuse = vec4(0.0);

        if(matsplit.x > 0.0)
        {
            if(pattern.r < matsplit.x)
                diffuse.rgb = mix(material3, material1, (matsplit.x - pattern.r) * matsplit.z); // 0   -> x   = 1 -> 0
            else if(pattern.r > matsplit.y)
                diffuse.rgb = mix(material3, material2, (pattern.r - matsplit.y) * matsplit.z); // y   -> 1   = 0 -> 1
            else diffuse.rgb = material3;
        }
        else diffuse.rgb = mix(material1, material2, smoothstep(0.0, 1.0, pattern.r));

        fragcolor = colorscale - diffuse;
    }
]

newui "rgbamixer" $SURFACE_COMPOSITE [
    @(localdef split 0.0)
    @(localdef tex "<grey>textures/notexture")

    execid uiarg1

    local _matsplit1 _matsplit2 _matsplit3 _matsplit4
    if (>f $split 0.0) [
        _matsplit1 = (clampf $split 0.0 0.5)
        _matsplit2 = (-f 1.0 $_matsplit1)
        _matsplit3 = (divf 1.0 $_matsplit1)
        _matsplit4 = (divf 1.0 (*f (-f $_matsplit2 $_matsplit1) 0.5))
    ] [
        _matsplit1 = 0
        _matsplit2 = 0
        _matsplit3 = 0
        _matsplit4 = 0
    ]

    uirender "rgbamixer" 1 1 [
        uirenderparam matsplit $_matsplit1 $_matsplit2 $_matsplit3 $_matsplit4
        uirendertex $tex
        echo $tex $split $_matsplit1 $_matsplit2 $_matsplit3 $_matsplit4
    ]
]