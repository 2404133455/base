shader 0 compositesmoke [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform float millis;
    uniform vec3 smokesize;
    uniform vec4 smokeparams;
    uniform vec4 smokeshade;
    uniform vec3 smokescroll;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    const mat2 smokemat = mat2(1.6, 1.2, -1.2, 1.6);

    vec2 hash(vec2 p)
    {
        vec2 coord = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));
        return -1.0 + 2.0 * fract(sin(coord) * 43758.5453123);
    }

    float noise(vec2 p)
    {
        const float K1 = 0.366025404;
        const float K2 = 0.211324865;
        vec2 i = floor(p + (p.x + p.y) * K1);
        vec2 a = p - i + (i.x + i.y) * K2;
        vec2 o = (a.x > a.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
        vec2 b = a - o + K2;
        vec2 c = a - 1.0 + 2.0 * K2;
        vec3 h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);
        vec3 n = h * h * h * h * vec3(dot(a, hash(i + 0.0)), dot(b, hash(i + o)), dot(c, hash(i + 1.0)));
        return dot(n, vec3(70.0));
    }

    float shape(vec2 p, float scale, float seed, float time, float wstart, float wamp, bool absolute)
    {
        float total = 0.0;
        vec2 coord = p * scale;
        coord -= (seed - time) * smokescroll.xy;
        float weight = wstart;
        for(int i = 0; i < smokeparams.w; i++)
        {
            total += absolute ? abs(weight * noise(coord)) : weight*noise(coord);
            coord = smokemat * coord + time * smokescroll.xy;
            weight *= wamp;
        }
        return total;
    }

    float fbm(vec2 p)
    {
        float total = 0.0, amplitude = 0.1;
        for(int i = 0; i < smokeparams.w; i++)
        {
            total += noise(p) * amplitude;
            p = smokemat * p;
            amplitude *= 0.4;
        }
        return total;
    }

    void main()
    {
        float dist = length((texcoord0 - vec2(0.5)) * smokesize.xy) * 2.0;
        float blend = 1.0 - smoothstep(smokesize.z, 1.0, dist);

        float smokeseed = fbm(texcoord0 * smokeparams.x * 0.5);
        float smokers = shape(texcoord0, smokeparams.x, smokeseed, millis + smokescroll.z, 0.8, 0.7, true);
        float smokens = shape(texcoord0, smokeparams.x, smokeseed, millis + smokescroll.z, 0.7, 0.6, false);
        smokens *= smokers + smokens;
        float smokenc = shape(texcoord0, smokeparams.x * 2.0, smokeseed, (millis + smokescroll.z) * 2.0, 0.4, 0.6, false);
        float smokerc = shape(texcoord0, smokeparams.x * 3.0, smokeseed, (millis + smokescroll.z) * 3.0, 0.4, 0.6, true);
        smokenc += smokerc;
        smokens = smokeparams.y + smokeparams.z * smokens * smokers;

        float smokemix = clamp(smokeshade.w + (smokens + smokenc) * smokeshade.z, 0.0, 1.0) * blend;
        float smokecmb = clamp(smokeshade.y + smokeshade.x * smokenc, 0.0, 1.0);

        fragcolor = vec4(smokecmb, smokecmb, smokecmb, smokemix) * colorscale;
    }
]

newcompui smoke [
    @(setlocal smokesize [1.0 1.0 0.5])
    @(setlocal smokeparams [1.0 0.25 2.0 2.0])
    @(setlocal smokeshade [0.25 0.125 0.25 0.75])
    @(setlocal smokescroll [0.0 0.1 1.0])
    execid uicompargs
    uialign -1 -1
    uivlist 0 [
        @(deflocal k 0)
        loop i 2 [
            uihlist 0 [
                loop j 2 [
                    uicomp compositesmoke 0.5 0.5 [
                        uicompparam smokesize $smokesize1 $smokesize2 $smokesize3
                        uicompparam smokeparams $smokeparams1 $smokeparams2 $smokeparams3 $smokeparams4
                        uicompparam smokeshade $smokeshade1 $smokeshade2 $smokeshade3 $smokeshade4
                        uicompparam smokescroll $smokescroll1 $smokescroll2 (*f $k $smokescroll3)
                    ]
                    k = (+ $k 1)
                ]
            ]
        ]
    ]
]
