toolpanel_calc_dimensions = [
    ui_toolpanel_close_button_width = (uiwidth 0.01)
    ui_toolpanel_pad_x = (*f 0.01 $uitoolscale)
    ui_toolpanel_pad_y = (*f 0.03 $uitoolscale)
    ui_toolpanel_width = (uiwidth 0.2)
    ui_toolpanel_content_width = (-f $ui_toolpanel_width (*f 2 $ui_toolpanel_pad_x))
    ui_toolpanel_menu_width = (uiwidth 0.08)
    ui_toolpanel_offset = (+f $ui_toolbar_height (*f 0.01 $uitoolscale))
    ui_toolpanel_elem_space = $ui_tool_elem_space_m
    ui_toolpanel_close_button_base_colour = 0xFFFF6666
    ui_toolpanel_close_button_highlight_colour = 0xFFFF9999
    ui_toolpanel_close_button_select_colour = 0xFFFFCCCC
    ui_toolpanel_slider_size = $ui_tool_slider_size_m
    ui_toolpanel_bar_text_size = $ui_tool_text_size_m
    ui_toolpanel_text_size = $ui_tool_text_size_s
]
tool_calc_ui_dimensions_handler toolpanel_calc_dimensions
toolpanel_calc_dimensions

toolpanel_popup_pos_x = 0
toolpanel_popup_pos_y = 0
toolpanel_popop_nav_select = -1

toolpanel_nav_handler = []
toolpanel_nav_panel = []

// Holds the panel (left, right, center, popup) within the current context of execution
toolpanel_this_panel = []

// Holds whether this panel has been just opened
toolpanel_this_isinit = 0

// Holds when this panel has been opened
toolpanel_this_open_millis = 0

// Panels
toolpanels = [
    popup
    center
    left
    right
]

// Common panel attributes
toolpanel_std_attrs = [
    name
    title
    open_millis
    props
    content
    init
    nav_enable
    user_data
    parent
]

// Returns the variable of a panel attribute
// 1:<panel> 2:<attr>
toolpanel_attr = [
    result [toolpanel_@[arg2]_@arg1]
]

// Initializes all common panel attributes to '[]'
toolpanel_init_std_attrs = [
    looplist panel $toolpanels [
        looplist attr $toolpanel_std_attrs [
            (toolpanel_attr $panel $attr) = []
        ]
    ]
]

toolpanel_init_std_attrs

// Clears all "this" properties
toolpanel_reset_this = [
    toolpanel_this_panel       = []
    toolpanel_this_isinit      = 0
    toolpanel_this_open_millis = 0
]

// Updates all "this" properties of a panel, for quick access.
// 1:<panel>
toolpanel_update_this = [
    toolpanel_this_panel       = $arg1
    toolpanel_this_isinit      = $(toolpanel_attr $arg1 init)
    toolpanel_this_open_millis = $(toolpanel_attr $arg1 open_millis)

    // Clear the init flag after reading it
    (toolpanel_attr $arg1 init) = 0
]



//////////////////////
// PANEL NAVIGATION //
//////////////////////



TOOLPANEL_NAV_V        = 0
TOOLPANEL_NAV_H        = 1
TOOLPANEL_NAV_QUICKSEL = 2
TOOLPANEL_NAV_ENTER    = 3
TOOLPANEL_NAV_ESCAPE   = 4

// 1:<type> 2:<param>
toolpanel_nav = [
    if $toolpanel_nav_handler [
        $toolpanel_nav_handler $arg1 $arg2
        result 1
    ]
]

// 1:<param>
tool_nav_v = [
    toolpanel_nav @TOOLPANEL_NAV_V $arg1
]

// 1:<param>
tool_nav_h = [
    toolpanel_nav @TOOLPANEL_NAV_H $arg1
]

// 1:<param>
tool_nav_quicksel = [
    toolpanel_nav @TOOLPANEL_NAV_QUICKSEL $arg1
]

tool_nav_enter = [
    toolpanel_nav @TOOLPANEL_NAV_ENTER
]

tool_nav_escape = [
    toolpanel_nav @TOOLPANEL_NAV_ESCAPE
]

// Picks the navigation handler panel
toolpanel_nav_handler_update = [
    local _panel _panel_name
    _panel = []
    _panel_name = []

    toolpanel_nav_handler = []
    toolpanel_nav_panel = []

    loopwhile i (listlen $toolpanels) [=s $toolpanel_nav_panel] [
        _panel = (at $toolpanels $i)
        _panel_name = $(toolpanel_attr $_panel name)

        if (&& [!=s $_panel_name] $(toolpanel_attr $_panel nav_enable)) [
            toolpanel_nav_panel = $_panel
            toolpanel_nav_handler = [ui_@[_panel_name]_nav]
        ]
    ]
]



//////////////////////
// PANEL MANAGEMENT //
//////////////////////



// Returns the panel (left, right, center, popup) by name, if it's open.
// 1:<name>
toolpanel_find_panel = [
    local _curpanel _panel
    _curpanel = []
    _panel = []

    loopwhile i @(listlen $toolpanels) [=s $_panel] [
        _curpanel = (at $toolpanels $i)
        if (strcmp $(toolpanel_attr $_curpanel name) $arg1) [
            _panel = $_curpanel
        ]
    ]

    result $_panel
]

// 1:<name>
toolpanel_isopen = [
    ? (toolpanel_find_panel $arg1) 1 0
]

// 1:<panel>
toolpanel_isopen_panel = [
    ? (!=s $(toolpanel_attr $arg1 name)) 1 0
]

// Closes children of <panel>
// 1:<panel>
toolpanel_close_child_panels = [
    local _parent
    _parent = []

    looplist panel $toolpanels [
        _parent = $(toolpanel_attr $panel parent)
        if (&& [toolpanel_isopen_panel $panel] [!=s $_parent] [=s $_parent $arg1]) [
            toolpanel_close_panel $panel
        ]
    ]
]

// Closes <panel> (left, right, center, popup) panel.
// Attempts to execute 'ui_<name>_on_close', where <name> is taken from the panel's attributes.
// 1:<panel>
toolpanel_close_panel = [
    local _panel_name _on_close
    _panel_name = $(toolpanel_attr $arg1 name)

    (toolpanel_attr $arg1 name) = []
    toolpanel_nav_handler_update

    // Execute 'ui_<name>_on_close'
    _on_close = [ui_@[_panel_name]_on_close]

    if (getalias $_on_close) [
        $_on_close
    ]

    if (=s $arg1 popup) [
        ui_menu_close_ui_toolpanel_popup = 1
        hideui "ui_toolpanel_popup"
    ]

    toolpanel_close_child_panels $arg1

    if (=s $arg1 $toolpanel_this_panel) [
        toolpanel_reset_this
    ]
]

// Finds and closes panel by <name>.
// Attempts to execute 'ui_<name>_on_close'.
// 1:<name>
toolpanel_close = [
    local _panel
    _panel = (toolpanel_find_panel $arg1)

    if $_panel [
        toolpanel_close_panel $_panel
    ]
]

// Closes the current panel, valid within the execution popup of a panel.
// Do not call when outside the panel popup.
// Attempts to execute 'ui_<name>_on_close', where <name> is taken from the panel's attributes.
toolpanel_close_this = [
    if $toolpanel_this_panel [
        toolpanel_close_panel $toolpanel_this_panel
    ]
]

toolpanel_open_props = [
    // Title of the panel, shown in the top bar
    [ p_title [] ]

    // Allows the panel to receive navigation input, via 'ui_<name>_nav_handler'
    [ p_nav_enable 0 ]

    // Popup panel type (menu, pie)
    [ p_popup_type menu ]

    // Desired position of the popup panel
    [ p_position [] ]

    // Minimum width of the panel
    [ p_width $ui_toolpanel_width ]

    // Other data to be passed into the panel
    [ p_user_data [] ]

    // Parent panel
    [ p_parent_panel auto ]
]

toolpanel_open_popup_menu = [
    // Calculate the horizontal position, so the panel doesn't go
    // out the screen when spawned near the edge.

    local _origin_error_x _contact_right
    _contact_right = (+f $p_width $toolpanel_popup_pos_x)
    _origin_error_x = (-f $_contact_right (uiaspect))

    if (>f $_origin_error_x 0) [
        toolpanel_popup_pos_x = (-f $toolpanel_popup_pos_x $_origin_error_x)
    ]
]

toolpanel_open_popup = [
    toolpanel_popup_pos_x = (at $p_position 0)
    toolpanel_popup_pos_y = (at $p_position 1)
    toolpanel_popop_nav_select = -1

    cases $p_popup_type menu [
        toolpanel_open_popup_menu
    ] pie [
    ]

    showui "ui_toolpanel_popup"
]

// Opens a <panel> (left, right, center, popup) panel.
// The content of the panel is taken from 'ui_<name>' variable.
// Attempts to execute 'ui_<name>_on_open'.
// 1:<name> 2:<panel> 3:<props>
toolpanel_open = [
    @(tool_props $toolpanel_open_props arg3)

    @(tool_ui_scale p_width)

    @(tool_collect_props $toolpanel_open_props props)

    // Don't do anything if <name> is already open
    if (toolpanel_isopen $arg1) [] [
        // Close previous panel
        toolpanel_close_panel $arg2

        // Set up attributes
        (toolpanel_attr $arg2 name)        = $arg1
        (toolpanel_attr $arg2 title)       = $p_title
        (toolpanel_attr $arg2 open_millis) = (getmillis 1)
        (toolpanel_attr $arg2 props)       = $props
        (toolpanel_attr $arg2 content)     = $[ui_@arg1]
        (toolpanel_attr $arg2 init)        = 1
        (toolpanel_attr $arg2 nav_enable)  = $p_nav_enable
        (toolpanel_attr $arg2 user_data)   = $p_user_data

        if (=s $p_parent_panel auto) [
            // Automatically assign to parent panel
            (toolpanel_attr $arg2 parent)  = $toolpanel_this_panel
        ] [
            // Forbid parenting to itself
            if (=s $p_parent_panel $arg2) [
                p_parent_panel = []
            ]

            (toolpanel_attr $arg2 parent)  = $p_parent_panel
        ]

        toolpanel_nav_handler_update

        // Execute 'ui_<name>_on_open'
        local _on_open
        _on_open = [ui_@[arg1]_on_open]

        if (getalias $_on_open) [
            $_on_open
        ]

        if (=s $arg2 popup) [
            toolpanel_open_popup
        ]
    ]
]

// Opens and closes a <panel> (left, right, center, popup) panel.
// The content of the panel is taken from 'ui_<name>' variable.
// Attempts to execute 'ui_<name>_on_open' when panel opens.
// Attempts to execute 'ui_<name>_on_close' when panel closes.
// 1:<name> 2:<panel> 3:<props>
toolpanel_toggle = [
    if (toolpanel_isopen $arg1) [
        toolpanel_close $arg1
    ] [
        toolpanel_open $arg1 $arg2 $arg3
    ]
]



////////////////////
// CONTEXT PANELS //
////////////////////



// 1:<nav type> 2:<param>
ui_toolpanel_popup_menu_nav = [
    if (= $arg1 @TOOLPANEL_NAV_QUICKSEL) [
        toolpanel_popop_nav_select = $arg2
    ]
]

ui_toolpanel_popup_menu = [
    ui_tool_listmenu $@(toolpanel_attr popup user_data)
]

toolpanel_open_menu_props = [
    [ p_width 0.15 ]
    [ p_nav_enable 0 ]
]

// 1:<props>
toolpanel_open_menu = [
    @(tool_props $toolpanel_open_menu_props arg1)

    toolpanel_open toolpanel_popup_menu popup [
        p_position = [@@(uicursorpos)]
        p_width = @p_width
        p_nav_enable = @p_nav_enable
        p_user_data = [
            @@arg1
            p_nav_enable = @@p_nav_enable
        ]
    ]
]

// 1:<nav type> 2:<param>
ui_toolpanel_popup_pie_nav = [
    if (= $arg1 @TOOLPANEL_NAV_QUICKSEL) [
        toolpanel_popop_nav_select = $arg2
    ]
]

ui_toolpanel_popup_pie = [
    ui_tool_piemenu $@(toolpanel_attr popup user_data)
]

toolpanel_open_pie_props = [
    [ p_width 0.15 ]
    [ p_nav_enable 0 ]
]

// 1:<props>
toolpanel_open_pie = [
    @(tool_props $toolpanel_open_pie_props arg1)

    toolpanel_open toolpanel_popup_pie popup [
        p_width = @p_width
        p_nav_enable = @p_nav_enable
        p_popup_type = pie
        p_user_data = [
            @@arg1
            p_nav_enable = @@p_nav_enable
            p_position = [@@@(uicursorpos)]
        ]
    ]
]



//////////////
// PANEL UI //
//////////////



// 1:<panel>
ui_toolpanel_bar_template = [
    result [
        local _bar_colour _text_colour
        _bar_colour = (? (=s @arg1 $toolpanel_nav_panel) $ui_tool_mid_accent_colour $ui_tool_dark_colour)
        _text_colour = (? (=s @arg1 $toolpanel_nav_panel) $ui_tool_dark_colour $ui_tool_accent_colour)

        uiskin 0 0 $_bar_colour 0 0 [
            uiclamp 1 1
            uicolourtext $@@(toolpanel_attr $arg1 title) $_text_colour $ui_toolpanel_bar_text_size [ uialign 0 0 ]
            uiskin $ui_tool_button_height_m $ui_tool_button_height_m $ui_toolpanel_close_button_base_colour $ui_toolpanel_close_button_highlight_colour $ui_toolpanel_close_button_select_colour [
                uialign 1 0
                uiimage "textures/hud/exit" 0xffffff 0 $ui_tool_icon_size_m $ui_tool_icon_size_m
                uirelease [ toolpanel_close_this ]
            ] 1
        ]
    ]
]

// 1:<panel>
ui_toolpanel_content_template = [
    local _panel_bar
    _panel_bar = (ui_toolpanel_bar_template $arg1)

    result [
        doargs $@(toolpanel_attr $arg1 props)

        uiskin 0 0 $ui_tool_base_colour 0 0 [
            uiclamp 1 1
            uialign -1 -1
            @@_panel_bar
            uispace $ui_toolpanel_pad_x $ui_toolpanel_pad_y [
                uiclamp 1 1
                @@@(toolpanel_attr $arg1 content)
            ]
            uialign* -1 -1

            uifill $p_width

            @@(ui_tool_allowinput)
        ]
    ]
]

// 1:<panel> 2:<align>
ui_toolpanel_template = [
    local _content
    _content = (ui_toolpanel_content_template $arg1)

    [ui_toolpanel_@arg1] = [
        toolpanel_update_this @arg1

        uipad 0 0 $ui_toolpanel_offset 0 [
            uialign @@arg2 -1
            uiclamp 0 0 1 1
            @@_content
        ]
    ]
]

ui_toolpanel_template left -1
ui_toolpanel_template center 0
ui_toolpanel_template right 1

newui "ui_toolpanel_popup" [
    @(tool_props $toolpanel_open_props (toolpanel_attr popup props))

    ui_menu_current = "ui_toolpanel_popup"
    ui_menu_close_ui_toolpanel_popup = 0

    uisetpos 0 0

    local _prevent_close
    _prevent_close = 0

    toolpanel_update_this popup

    uifont "tess" [
        uitarget (uiaspect) 1 [
            if (=s $p_popup_type menu) [
                ui_tool_vscrollarea [
                    uiskin 0 0 $ui_tool_dark_colour 0 0 (toolpanel_attr popup content)
                    uiclamp- 1 1

                    uirelease [
                        _prevent_close = 1
                    ]

                    uialtrelease [
                        _prevent_close = 1
                    ]
                ] [
                    p_width = @p_width
                    p_height = @(-f 1 $toolpanel_popup_pos_y)
                    p_scrollbar_spacing = 0
                    p_scrollbar_allocate = 0
                ]

                uiposition- $toolpanel_popup_pos_x $toolpanel_popup_pos_y
            ] [
                (toolpanel_attr popup content)
            ]

            uirelease [
                if (= $_prevent_close) [
                    toolpanel_close_this
                ]
            ]

            uialtrelease [
                if (= $_prevent_close) [
                    toolpanel_close_this
                ]
            ]

            uiescpress [
                toolpanel_close_this
            ]

            @@(ui_tool_allowinput)
        ]
    ]

    ui_menu_current = ""
] [] [
    // Handle external closing of UI (e.g. when leaving edit mode)
    if (toolpanel_isopen_panel popup) [
        toolpanel_close_panel popup
    ]
]

ui_toolpanels = [
    toolpanel_content_max_height = (-f 1 $ui_toolinfo_status_height $ui_toolpanel_offset $ui_toolpanel_pad_y $ui_toolpanel_pad_y)

    // Draw open panel UIs
    uiclip (uiaspect) 1 0 0 [
        uiclamp 1 1 1 1
        uifill (uiaspect) 1
        if (toolpanel_isopen_panel left)   [ @@ui_toolpanel_left   ]
        if (toolpanel_isopen_panel right)  [ @@ui_toolpanel_right  ]
        if (toolpanel_isopen_panel center) [ @@ui_toolpanel_center ]
    ]

    toolpanel_reset_this
]
