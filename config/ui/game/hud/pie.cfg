game_hud_piemenu_id           = []
game_hud_piemenu_anim         = 0
game_hud_piemenu_items        = []
game_hud_piemenu_actions      = []
game_hud_piemenu_propsstor    = []
game_hud_piemenu_numitems     = 0
game_hud_piemenu_lastnumitems = 0

// 1:<index>
game_hud_piemenu_get_anim_var = [
    concatword "game_hud_piemenu_anim_" $arg1
]

shader $SHADER_DEFAULT shdr_gameui_piemenu [
    attribute vec4 vvertex, vcolor;
    attribute vec2 vtexcoord0;
    uniform mat4 hudmatrix;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    void main(void)
    {
        gl_Position = hudmatrix * vvertex;
        texcoord0 = vtexcoord0;
        colorscale = vcolor;
    }
] [
    uniform sampler2D tex0;
    uniform float radius, bgradius, thickness, startdeg, lengthdeg, soften;
    uniform vec4 objcolor1, objcolor2;
    varying vec2 texcoord0;
    varying vec4 colorscale;

    fragdata(0) vec4 fragcolor;

    void main()
    {
        // Normalize to coords to [-1, 1]
        vec2 uv = texcoord0.xy * 2.0 - 1.0;
        uv.y = -uv.y;

        float angle = radians(90.0) - atan(uv.y, uv.x);
        if (angle < 0.0) angle += 2.0 * 3.14159; // Normalize angle to [0, 2*PI]

        float startrad = radians(startdeg);
        float endrad = radians(mod(startdeg + lengthdeg, 360.0));

        float anglemask;
        if (startrad > endrad)
        {
            // Arc crosses the 360/0 boundary
            anglemask = smoothstep(startrad, startrad + soften, angle) +
                        smoothstep(endrad + soften, endrad, angle);
            anglemask = clamp(anglemask, 0.0, 1.0);
        }
        else
        {
            anglemask = smoothstep(startrad, startrad + soften, angle) *
                        smoothstep(endrad + soften, endrad, angle);
        }

        // Discard fragments outside the arc
        if(anglemask == 0.0) discard;

        vec4 circlecolor    = colorscale;
        vec4 bgcolor        = objcolor1;

        float dist = distance(uv, vec2(0.0, 0.0));

        float inneredge = radius - thickness;
        float outeredge = radius;

        float circlemask = smoothstep(inneredge - soften, inneredge, dist) -
                           smoothstep(outeredge - soften, outeredge, dist);

        float mask = circlemask * anglemask;

        vec4 bgfaded = mix(bgcolor, vec4(0.0, 0.0, 0.0, 0.0), 1.0 - ((1.0 - dist) * anglemask));
        bgfaded *= smoothstep(bgradius - soften, bgradius, dist);

        fragcolor = mix(bgfaded, circlecolor, mask);
    }
] 1

game_hud_piemenu_props = [
    [ p_size            0.6        ]
    [ p_gap             6          ]
    [ p_bgcolour        0x88000000 ]
    [ p_slicecolour     0x40000000 ]
    [ p_selslicecolour  0x88ffffff ]
    [ p_circlecolour    0xaaaaaa   ]
    [ p_selcirclecolour 0xffffff   ]
    [ p_radius          0.75       ]
    [ p_selradius       0.85       ]
    [ p_bgradius        0.2        ]
    [ p_selbgradius     0.25       ]
    [ p_itemradius      0.4        ]
    [ p_selitemradius   0.45       ]
    [ p_thickness       0.03       ]
    [ p_selthickness    0.1        ]
    [ p_soften          0.01       ]
    [ p_selsoften       0.01       ]
    [ p_center          []         ]
]

ui_game_hud_piemenu = [
    @(props $game_hud_piemenu_props game_hud_piemenu_propsstor)

    local _total_gaps _length _cur_start _sel _dirx _diry _cursor_angle _angstep _selmin _selmax
    _total_gaps   = (*f $p_gap $game_hud_piemenu_numitems)
    _length       = (divf (-f 360 $_total_gaps) $game_hud_piemenu_numitems)
    _cur_start    = (+f (*f $_length -0.5) 360)
    _dirx         = (-f $uicursorx (uiwidth 0.5))
    _diry         = (-f $uicursory 0.5)
    _cursor_angle = (+f (*f (atan2 $_dirx $_diry) -1) 180)
    _angstep      = (divf 360 $game_hud_piemenu_numitems)

    local _anim _size _item _selitem _anim_state_var _item_anim_state
    _anim    = (smoothstep $game_hud_piemenu_anim)
    _size    = (lerpf 0 $p_size $_anim)
    _selitem = -1

    uitarget $uiaspect 1 [
        uiallowinput 1

        uiimage $hintenttex $p_bgcolour 0 $_size $_size
        uiimage $hintenttex $p_bgcolour 0 (*f $_size $p_bgradius) (*f $_size $p_bgradius)

        uiradar 1 0 0 $_size $_size [
            loop i $game_hud_piemenu_numitems [
                _sel             = 0
                _anim_state_var  = (game_hud_piemenu_get_anim_var $i)
                _item_anim_state = (getalias $_anim_state_var)

                // Check if cursor is over this segment
                _selmin = (-f $_cur_start (*f $p_gap 0.5))
                _selmax = (modf (+f $_cur_start $_length (*f $p_gap 0.5)) 360)

                if (<f $_selmin $_selmax) [
                    if (&& [>=f $_cursor_angle $_selmin] [<f $_cursor_angle $_selmax]) [
                        _sel = 1
                    ]
                ] [
                    if (|| [>=f $_cursor_angle $_selmin] [<f $_cursor_angle $_selmax]) [
                        _sel = 1
                    ]
                ]

                if $_sel [
                    _selitem = $i
                    _item_anim_state = (animstep $_item_anim_state 100 1)
                ] [
                    _item_anim_state = (animstep $_item_anim_state 100 -1)
                ]

                uirender shdr_gameui_piemenu 0 0 [
                    uiclamp 1 1 1 1

                    uicolourblend           0.85
                    uicolourset             (? $_sel $p_selcirclecolour $p_circlecolour)
                    uicolouradd             (? $_sel $p_selslicecolour $p_slicecolour) 1
                    uirenderparam radius    (lerpf $p_radius $p_selradius $_item_anim_state)
                    uirenderparam bgradius  (lerpf $p_bgradius $p_selbgradius $_item_anim_state)
                    uirenderparam thickness (lerpf $p_thickness $p_selthickness $_item_anim_state)
                    uirenderparam startdeg  $_cur_start
                    uirenderparam lengthdeg $_length
                    uirenderparam soften    (lerpf $p_soften $p_selsoften $_item_anim_state)
                ]

                _cur_start = (modf (+f $_cur_start $_length $p_gap) 360)

                _item = (at $game_hud_piemenu_items $i)

                uiradarblip "" 0 (*f $_angstep $i) 0 (lerpf $p_itemradius $p_selitemradius $_item_anim_state) 0.0001 0.0001 [
                    uivlist 0 [
                        caseif (< $i 9) [
                            uiimage (concatword "textures/keys/" (+ $i 1)) 0xffffff 0 0.02 0.02
                        ] (= $i 9) [
                            uiimage "textures/keys/0" 0xffffff 0 0.02 0.02
                        ]
                        _item $_sel $_item_anim_state
                    ]
                ]

                $_anim_state_var = $_item_anim_state
            ]
        ]

        p_center $_selitem

        uipropagate [
            uicolourblend $_anim
        ]

        uirelease [
            if (>= $_selitem 0) [
                game_hud_piemenu_doaction $_selitem
            ]
        ]

        uiescrelease [
            game_hud_piemenu_close
        ]

        uialtrelease [
            game_hud_piemenu_close
        ]
    ]

    game_hud_piemenu_anim = (animstep $game_hud_piemenu_anim 250 1)
]

newui "hud_piemenu" $SURFACE_FOREGROUND [
    uiallowinput 1

    ui_game_hud_piemenu
]

game_hud_piemenu_close = [
    game_hud_piemenu_id      = []
    game_hud_piemenu_actions = []
    hideui "hud_piemenu"
]

// 1:<action index>
game_hud_piemenu_doaction = [
    local _action
    _action = (at $game_hud_piemenu_actions $arg1)
    _action
    game_hud_piemenu_close
]

// 1:<id> 2:<items> 3:<actions> 4:<props>
# game_hud_piemenu_open = [
    if (=s $game_hud_piemenu_id $arg1) [
        game_hud_piemenu_close
    ] [
        game_hud_piemenu_close

        loop i $game_hud_piemenu_lastnumitems [
            (game_hud_piemenu_get_anim_var $i) = []
        ]

        game_hud_piemenu_id           = $arg1
        game_hud_piemenu_items        = $arg2
        game_hud_piemenu_actions      = $arg3
        game_hud_piemenu_propsstor    = $arg4
        game_hud_piemenu_numitems     = (listlen $arg2)
        game_hud_piemenu_anim         = 0
        game_hud_piemenu_lastnumitems = $game_hud_piemenu_numitems

        showui "hud_piemenu"
    ]
]

// 1:<num>
game_hud_piemenu_num_nav_handler = [
    local _intercept
    _intercept = 0

    if (&& [!=s $game_hud_piemenu_id []] [< $arg1 $game_hud_piemenu_numitems]) [
        game_hud_piemenu_doaction $arg1
        _intercept = 1
    ]

    result $_intercept
]
num_nav_addhandler game_hud_piemenu_num_nav_handler

// 1:<text> 2:<colour> 3:<size> 4:<selected> 5:<anim>
ui_game_hud_piemenu_textitem = [
    local _size
    _size = (*f $arg3 (lerpf 1 1.2 $arg5))

    uifont "play/clear" [
        uioffset 0.002 0.002 [
            uicolourtext $arg1 0 $_size
        ]
        uicolourtext $arg1 $arg2 $_size

        uipropagate [
            uicolourblend (? $arg4 1 0.4)
        ]
    ]
]

// 1:<messages> 2:<title> 3:<team>
# game_hud_piemenu_open_qmsg = [
    local _items _actions
    _items   = []
    _actions = []

    looplist i $arg1 [
        append _items [[ui_game_hud_piemenu_textitem [#2 i] 0xffffff 1 $arg1 $arg2]]
        append _actions [[#1 (? $arg3 sayteam say) [#2 i]]]
    ]

    result [
        game_hud_piemenu_open [#1 arg2] [#1 _items] [#1 _actions] [
            #1(? $arg3 [
                p_circlecolour    = [@(tool_colour_hsvmod_int (tool_colour_hsvmod_int $playerteamcolour v 0.5) s 0.67)]
                p_selcirclecolour = [@(tool_colour_hsvmod_int $playerteamcolour s 0.33)]
                p_center = [
                    uiimage $playerteamicon $playerteamcolour 0 0.1 0.1 [
                        uicolourblend 0.33
                    ]
                    uifont "play/clear/bold" [
                        uitext [#3 arg2] 2
                    ]
                ]
            ] [
                p_center = [
                    uiimage "<grey>textures/icons/voices" 0xffffff 0 0.1 0.1 [
                        uicolourblend 0.33
                    ]
                    uifont "play/clear/bold" [
                        uitext [#3 arg2] 2
                    ]
                ]
            ])
        ]
    ]
]

game_hud_piemenu_open_taunts = [
    @(game_hud_piemenu_open_qmsg [
        "Argh!"
        "Lucky shot!"
        "Nice shot!"
        "Boom!"
        "Damn it!"
        "Haha!"
        "Suck it!"
        "Pzap!"
    ] "Taunt")
]

# game_hud_piemenu_open_teamchat = [
    if (! (hasmut $G_M_FFA)) [
        #(game_hud_piemenu_open_qmsg [
            "Yes!"
            "No!"
            "Sorry!"
            "No problem!"
            "Thanks!"
            "Go go go!"
            "Hang on!"
        ] "Team" 1)
    ]
]
