GAME_HUD_AFFINITY_SCORE  = 0
GAME_HUD_AFFINITY_SECURE = 1
GAME_HUD_AFFINITY_DROP   = 2
GAME_HUD_AFFINITY_RETURN = 3

GAME_HUD_AFFINITY_FADE_TIME = 0.1

// Returns whether a given event type is persistent
// 1:<event type>
game_hud_affinity_is_event_persist = [
    result 0
]

// Transient event queue
game_hud_affinity_transient_events = []

// Persistent event (no queue, only one event is allowed)
game_hud_affinity_persist_event = []

// Current event
game_hud_affinity_cur_event         = []
game_hud_affinity_event_persist     = 0
game_hud_affinity_event_anim        = 0
game_hud_affinity_event_text        = ""
game_hud_affinity_event_icon        = ""
game_hud_affinity_event_target_used = 0

// Bit mask of the available affinity layout targets
// Space for two affinities
game_hud_affinity_avail_targets = 3

// Gets the layout target num for the icon to move to
game_hud_affinity_event_get_icon_target_num = [
    if (= (at $game_hud_affinity_cur_event 0) $GAME_HUD_AFFINITY_SECURE) [
        if (& $game_hud_affinity_avail_targets 1) [
            result 1
        ] [
            if (& $game_hud_affinity_avail_targets 2) [
                result 2
            ] // Else, no space available? Don't error to avoid spamming the console
        ]
    ]
]

// Gets the layout target for the icon to move to
// 1:<target num>
game_hud_affinity_event_get_icon_target = [
    case $arg1 1 [
        if (& $game_hud_affinity_avail_targets 1) [
            game_hud_affinity_avail_targets = (& $game_hud_affinity_avail_targets 2)
            result game_hud_player_affinity_target1
        ]
    ] 2 [
        if (& $game_hud_affinity_avail_targets 2) [
            game_hud_affinity_avail_targets = (& $game_hud_affinity_avail_targets 1)
            result game_hud_player_affinity_target2
        ]
    ]
]

// Puts the icon target back into the available targets
// 1:<target name>
game_hud_affinity_event_put_icon_target = [
    if (=s $arg1 game_hud_player_affinity_target1) [
        game_hud_affinity_avail_targets = (| $game_hud_affinity_avail_targets 1)
    ] [
        if (=s $arg1 game_hud_player_affinity_target2) [
            game_hud_affinity_avail_targets = (| $game_hud_affinity_avail_targets 2)
        ]
    ]
]

ui_game_hud_affinity_event = [
    local  _team_colour _affinity_colour _flash_anim _layout_anim _aff_anim _fade_anim _text_size _image_size _glow_size _icon_target
    _team_colour     = (getteamcolour (getclientteam $ui_hud_focus))
    _flash_anim      = (gameui_anim_segment $game_hud_affinity_event_anim 0.85 1)
    _layout_anim     = (smoothstep (gameui_anim_segment $game_hud_affinity_event_anim 0.6 0.8))
    _aff_anim        = (gameui_anim_segment $_layout_anim 0.75 1)
    _fade_anim       = (gameui_anim_segment $game_hud_affinity_event_anim 0 $GAME_HUD_AFFINITY_FADE_TIME)
    _text_size       = (lerpf $game_hud_status_text_size (*f $game_hud_status_text_size 1.5) $_layout_anim)
    _glow_size       = (*f $game_hud_largepanel_width 0.3 $_layout_anim)
    _team_colour     = (tool_colour_hsvmod_int $_team_colour s (-f 1 $_flash_anim))
    _affinity_colour = (game_hud_get_affinity_colour (at $game_hud_affinity_cur_event 1))
    _icon_target     = (game_hud_affinity_event_get_icon_target_num (at $game_hud_affinity_cur_event 0))

    if $_icon_target [
        _image_size = (*f $game_hud_largepanel_width 0.3)
    ] [
        _image_size = (lerpf 0 (*f $game_hud_largepanel_width 0.3) $_layout_anim)
    ]

    uigroup [
        uialign 0 1

        uivlist 0 [
            uiimage $glowtex $_affinity_colour 0 (*f $_glow_size 1.5) $_glow_size [
                uicolourblend $_flash_anim
            ]

            uifill 0 (lerpf (*f $_glow_size 0.5) 0 $_flash_anim)
        ]

        uivlist (*f $game_hud_largepanel_width 0.01) [
            uiimage (game_hud_get_affinity_icon) $_affinity_colour 0 $_image_size $_image_size [
                local _affinity_blend _sub_icon_blend _sub_icon_size _shadow_offset
                _sub_icon_blend = (*f $_aff_anim 0.67 (-f 1 $_flash_anim))
                _sub_icon_size  = (*f $_image_size 0.5)
                _shadow_offset  = (*f $_image_size 0.035)

                if (&& $_icon_target [! $game_hud_affinity_event_target_used]) [
                    // At the end of animation
                    if (=f $_aff_anim 0) [
                        game_hud_affinity_event_target_used = 1
                        _icon_target = (game_hud_affinity_event_get_icon_target $_icon_target)

                        game_hud_show_dyn_layout $_icon_target 750 [
                            uiimage (game_hud_get_affinity_icon) (game_hud_get_affinity_colour @(at $game_hud_affinity_cur_event 1)) 0 $_w $_h [
                                uicolourblend 0.67
                            ]
                        ] [
                            ! (game_hud_is_affinity_owned @(at $game_hud_affinity_cur_event 1))
                        ] [
                            game_hud_affinity_event_put_icon_target $p_target
                        ]
                    ]

                    _affinity_blend = (*f (ceilf $_aff_anim) 0.67 (-f 1 $_flash_anim))
                ] [
                    _affinity_blend = $_sub_icon_blend
                ]

                uicolourblend $_affinity_blend

                uigroup [
                    uialign 1 1

                    uioffset $_shadow_offset $_shadow_offset [
                        uiimage $game_hud_affinity_event_icon 0 0 $_sub_icon_size $_sub_icon_size
                    ]

                    uiimage $game_hud_affinity_event_icon 0x888888 0 $_sub_icon_size $_sub_icon_size

                    uipropagate [ uicolourblend $_sub_icon_blend ]
                ]
            ]

            uifill 0 (lerpf 0 (*f $game_hud_largepanel_width 0.02) (smoothstep (gameui_anim_dual_edge $_flash_anim 0.45 0.55)))

            uifill 0 0 [
                ui_gameui_advshadowhoriz [
                    p_colour  = $_team_colour
                    p_bgblend = (*f (gameui_anim_pulse 1 0.5 1) $_layout_anim)
                ]

                uispace (*f $game_hud_largepanel_width 0.2) (*f $game_hud_largepanel_width 0.005) [
                    uifont "play/clear" [
                        uitext $game_hud_affinity_event_text $_text_size
                    ]
                ]
            ]

            uifill 0 (lerpf 0 0.05 $_layout_anim)
        ]

        uipropagate [
            uicolourblend $_fade_anim
        ]
    ]
]

// 1:<event type> 2:<affinity id>
game_hud_affinity_set_props_capture = [
    case $arg1 $GAME_HUD_AFFINITY_SECURE [
        if (= (getcaptureteam $arg2) (getclientteam $ui_hud_focus)) [
            game_hud_affinity_event_text = "You've picked up your flag!"
        ] [
            game_hud_affinity_event_text = "You've picked up the enemy flag!"
        ]
        game_hud_affinity_event_icon = $flagtakentex
    ] $GAME_HUD_AFFINITY_DROP [
        if (= (getcaptureteam $arg2) (getclientteam $ui_hud_focus)) [
            game_hud_affinity_event_text = "You've dropped your flag!"
        ] [
            game_hud_affinity_event_text = "You've dropped the enemy flag!"
        ]
        game_hud_affinity_event_icon = $flagdroptex
    ] $GAME_HUD_AFFINITY_SCORE [
        game_hud_affinity_event_text = "You've scored!"
        game_hud_affinity_event_icon = ""
    ] $GAME_HUD_AFFINITY_RETURN [
        game_hud_affinity_event_text = "You've returned your flag!"
        game_hud_affinity_event_icon = ""
    ]
]

// 1:<event type> 2:<affinity id>
game_hud_affinity_set_props_bomber = [
    case $arg1 $GAME_HUD_AFFINITY_SECURE [
        game_hud_affinity_event_text = "You've picked up the bomb!"
        game_hud_affinity_event_icon = $bombtakentex
    ] $GAME_HUD_AFFINITY_DROP [
        game_hud_affinity_event_text = "You've dropped the bomb!"
        game_hud_affinity_event_icon = $bombdroptex
    ] $GAME_HUD_AFFINITY_SCORE [
        game_hud_affinity_event_text = "You've scored!"
        game_hud_affinity_event_icon = ""
    ]
]

// Updates the properties of the current event
game_hud_affinity_set_props = [
    local _type _affinity_id
    _type        = (at $game_hud_affinity_cur_event 0)
    _affinity_id = (at $game_hud_affinity_cur_event 1)

    game_hud_affinity_event_anim        = 1
    game_hud_affinity_event_persist     = (game_hud_affinity_is_event_persist $_type)
    game_hud_affinity_event_target_used = 0

    case $gamemode $G_CAPTURE [
        game_hud_affinity_set_props_capture $_type $_affinity_id
    ] $G_BOMBER [
        game_hud_affinity_set_props_bomber $_type $_affinity_id
    ]
]

// Updates the current event by selecting the next
// Priority is given to transient events
game_hud_affinity_next_event = [
    if (=s $game_hud_affinity_transient_events []) [
        game_hud_affinity_cur_event     = $game_hud_affinity_persist_event
        game_hud_affinity_persist_event = []
    ] [
        if (!=s $game_hud_affinity_transient_events []) [
            game_hud_affinity_cur_event        = (at $game_hud_affinity_transient_events 0)
            game_hud_affinity_transient_events = (sublist $game_hud_affinity_transient_events 1)
        ] [
            // No more events
            game_hud_affinity_cur_event = []
        ]
    ]

    if (!=s $game_hud_affinity_cur_event []) [
        game_hud_affinity_set_props
    ]
]

// 1:<event type> 2:<affinity id>
game_hud_affinity_event = [
    if (game_hud_affinity_is_event_persist $arg1) [
        game_hud_affinity_persist_event = [@arg1 @arg2]
    ] [
        append game_hud_affinity_transient_events [[@@arg1 @@arg2]]
    ]
]

ui_game_hud_affinity = [
    if (!=s $game_hud_affinity_cur_event []) [
        ui_game_hud_affinity_event

        game_hud_affinity_event_anim = (animstep $game_hud_affinity_event_anim 3000 -1)

        if $game_hud_affinity_event_persist [
            game_hud_affinity_event_anim = (maxf $GAME_HUD_AFFINITY_FADE_TIME $game_hud_affinity_event_anim)
        ]

        if $game_hud_affinity_event_anim [] [
            // Event animation finished and it is no longer shown, select the next event
            game_hud_affinity_cur_event = []
        ]
    ] [
        game_hud_affinity_next_event
    ]
]
